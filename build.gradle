plugins {
    id 'java'
    id "io.morethan.jmhreport" version "0.7.0" // JMH-Visualizer integration gradle plugin
}

version '0.1.0'

sourceCompatibility = 1.9

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "org.apache.logging.log4j:log4j-api:2.11.0"
    compile "org.apache.logging.log4j:log4j-core:2.11.0"
    compile "org.apache.logging.log4j:log4j-jul:2.11.0"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.11.0"
    compile "com.lmax:disruptor:3.4.2"
}

/* ----------------- *
 * JMH CONFIGURATION *
 * ----------------- */
sourceSets {
    jmh // Declare a new sources-set gradle scope named jmh
}

dependencies {
    // JMH Benchmarking dependencies are scoped only to the 'jmh' sources-set
    jmhCompile project
    jmhCompile "org.openjdk.jmh:jmh-core:1.21"
    jmhCompile "org.openjdk.jmh:jmh-generator-annprocess:1.21"
    jmhCompile "org.openjdk.jmh:jmh-generator-bytecode:1.21"
    jmhCompile "org.apache.commons:commons-lang3:3.7"
}

// Configure the JMH-visualizer plugin to collect reports from this path
jmhReport {
    jmhResultPath = project.file('build/reports/jmh/result.json')
    jmhReportOutput = project.file('build/reports/jmh')
}

// While there's a JMH-gradle plugin to cover this functionality,
// I found this form of configuration/execution to be the simplest
task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {

    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def format = 'json';
    def resultFile = file("build/reports/jmh/result.${format}")
    if (!resultFile.parentFile.exists()) {
        assert resultFile.parentFile.mkdirs()
    }

    args 'Benchmark.*'
    args '-rf', format
    args '-rff', resultFile
}